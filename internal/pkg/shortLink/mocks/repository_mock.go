// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockRepository) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockRepositoryMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockRepository)(nil).Clear))
}

// Close mocks base method.
func (m *MockRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// Connect mocks base method.
func (m *MockRepository) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockRepositoryMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockRepository)(nil).Connect))
}

// GetUrl mocks base method.
func (m *MockRepository) GetUrl(url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrl", url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUrl indicates an expected call of GetUrl.
func (mr *MockRepositoryMockRecorder) GetUrl(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrl", reflect.TypeOf((*MockRepository)(nil).GetUrl), url)
}

// SaveUrl mocks base method.
func (m *MockRepository) SaveUrl(longUrl, shortUrl string, expirationTime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUrl", longUrl, shortUrl, expirationTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUrl indicates an expected call of SaveUrl.
func (mr *MockRepositoryMockRecorder) SaveUrl(longUrl, shortUrl, expirationTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUrl", reflect.TypeOf((*MockRepository)(nil).SaveUrl), longUrl, shortUrl, expirationTime)
}

// UpdateTime mocks base method.
func (m *MockRepository) UpdateTime(expirationTime time.Time, shortLink string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTime", expirationTime, shortLink)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTime indicates an expected call of UpdateTime.
func (mr *MockRepositoryMockRecorder) UpdateTime(expirationTime, shortLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTime", reflect.TypeOf((*MockRepository)(nil).UpdateTime), expirationTime, shortLink)
}

// UrlExistsShort mocks base method.
func (m *MockRepository) UrlExistsShort(url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UrlExistsShort", url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UrlExistsShort indicates an expected call of UrlExistsShort.
func (mr *MockRepositoryMockRecorder) UrlExistsShort(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UrlExistsShort", reflect.TypeOf((*MockRepository)(nil).UrlExistsShort), url)
}
